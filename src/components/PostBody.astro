---
import markdownHtmlLib from 'zenn-markdown-html'
import {
  $getPageFullContent,
  MarkdownUtils,
  createBasicBookmarkTransformer,
  createBasicLinkPreviewTransformer,
} from '@notion-md-converter/core'
import {
  NotionZennMarkdownConverter,
  ZennMarkdownUtils,
} from '@notion-md-converter/zenn'
import { Client } from '@notionhq/client'
import 'zenn-content-css'

export interface Props {
  pageId: string
}

const { pageId } = Astro.props

const client = new Client({
  auth: process.env.NOTION_API_SECRET,
})

const content = await $getPageFullContent(client, pageId)
const createLinkPreview = () => {
  return createBasicLinkPreviewTransformer(({ block }) => {
    console.log(block.link_preview.url)
    if (block.link_preview.url.startsWith('https://github.com')) {
      return MarkdownUtils.wrapWithNewLines(block.link_preview.url)
    }

    const embed = ZennMarkdownUtils.embedByURL(block.link_preview.url).result
    console.log(embed)
    return embed
  })
}
const createMarkdownBookmarkTransformer = () => {
  return createBasicBookmarkTransformer(({ block }) => {
    return `@[card](${block.bookmark.url})`
  })
}

const executor = new NotionZennMarkdownConverter({
  bookmark: createMarkdownBookmarkTransformer(),
  link_preview: createLinkPreview(),
})

let md = executor.execute(content)

md = md
  .split('\n')
  .map((line) => {
    const trimmed = line.trim()
    if (trimmed.startsWith('https://github.com')) {
      return trimmed
    }

    return line
  })
  .join('\n')

type MarkdownHtml = typeof markdownHtmlLib
type MarkdownHtmlAtBuild = { default: MarkdownHtml }
const markdownHtml =
  typeof markdownHtmlLib === 'function'
    ? markdownHtmlLib
    : (markdownHtmlLib as MarkdownHtmlAtBuild).default
const notemd = markdownHtml(md, {
  embedOrigin: 'https://embed.zenn.studio',
})
// fs.writeFileSync('test.md', md)
---

<div class="znc" set:html={notemd} />

<style>
  .post-body {
    padding: 0.5rem 0;
  }
</style>
